# use pluginized rpsec if it exists
rspec_base = File.expand_path(File.dirname(__FILE__) + '/../rspec/lib')
$LOAD_PATH.unshift(rspec_base) if File.exist?(rspec_base) and !$LOAD_PATH.include?(rspec_base)
 
require 'spec/rake/spectask'
require 'spec/rake/verify_rcov'
require 'rake/rdoctask' 

load 'PluginsVsRails.rake'

plugin_name = 'is_creditworthy' 


task :default => :spec
task :spec => :rails

desc "Run the specs for #{plugin_name}"
Spec::Rake::SpecTask.new(:spec) do |t|
  t.spec_files = FileList['spec/**/*_spec.rb']
  t.spec_opts = ["--colour"]
end

namespace :spec do
  desc "Generate RCov report for #{plugin_name}"
  Spec::Rake::SpecTask.new(:rcov) do |t|
    t.spec_files = FileList['spec/**/*_spec.rb']
    t.rcov = true
    t.rcov_dir = 'doc/coverage'
    t.rcov_opts = ['--text-report', '--exclude', "config/,spec/,rcov.rb,#{File.expand_path(File.join(File.dirname(__FILE__),'../../..'))}"]
  end
  
  namespace :rcov do
    desc "Verify RCov threshold for #{plugin_name}"
    RCov::VerifyTask.new(:verify => "spec:rcov") do |t|
      t.threshold = 100.0
      t.index_html = File.join(File.dirname(__FILE__), 'doc/coverage/index.html')
    end  end
  

  desc "Generate specdoc for #{plugin_name}"
  Spec::Rake::SpecTask.new(:doc) do |t|
    t.spec_files = FileList['spec/**/*_spec.rb']
    t.spec_opts = ["--format", "specdoc:SPECDOC"]
  end
  
  namespace :doc do
    desc "Generate html specdoc for #{plugin_name}"
    Spec::Rake::SpecTask.new(:html => :rdoc) do |t|
      t.spec_files = FileList['spec/**/*_spec.rb']
      t.spec_opts = ["--format", "html:doc/rspec_report.html", "--diff"]
    end
  end
end
